//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

using API.SDK.Contracts;

namespace Assette.Client
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IClient
    {
        /// <summary>Creates or updates one or more accounts.</summary>
        /// <returns>List of results for each upserted account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountSimpleDtoListResult> CreateOrUpdateAccountsAsync(System.Collections.Generic.IEnumerable<AccountToCreateDto> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates or updates one or more accounts.</summary>
        /// <returns>List of results for each upserted account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountSimpleDtoListResult> CreateOrUpdateAccountsAsync(System.Collections.Generic.IEnumerable<AccountToCreateDto> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Removes an account.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountSimpleDtoListResult> RemoveAccountsAsync(System.Collections.Generic.IEnumerable<string> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes an account.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountSimpleDtoListResult> RemoveAccountsAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets accounts by filter.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountDtoListResult> SearchAccountsAsync(SieveModel body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets accounts by filter.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountDtoListResult> SearchAccountsAsync(SieveModel body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific account in the system based on the filter.</summary>
        /// <param name="accountCode">The account code to look for.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountDtoResult> GetAccountAsync(string accountCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific account in the system based on the filter.</summary>
        /// <param name="accountCode">The account code to look for.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountDtoResult> GetAccountAsync(string accountCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates or updates categories of document types</summary>
        /// <returns>List of results for all created categories</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategorySimpleDtoListResult> CreateOrUpdateCategoriesAsync(System.Collections.Generic.IEnumerable<CategoryToCreateDto> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates or updates categories of document types</summary>
        /// <returns>List of results for all created categories</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategorySimpleDtoListResult> CreateOrUpdateCategoriesAsync(System.Collections.Generic.IEnumerable<CategoryToCreateDto> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get All categories</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryDtoListResult> GetAllCategoriesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get All categories</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryDtoListResult> GetAllCategoriesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific category.</summary>
        /// <param name="categoryCode">The Key of the Category to look for.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryDtoResult> GetCategoryAsync(string categoryCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific category.</summary>
        /// <param name="categoryCode">The Key of the Category to look for.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryDtoResult> GetCategoryAsync(string categoryCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Remove a category</summary>
        /// <param name="categoryCode">Category to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveCategoryAsync(string categoryCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove a category</summary>
        /// <param name="categoryCode">Category to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveCategoryAsync(string categoryCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates Associations.</summary>
        /// <returns>List of results for each created association.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssociationSimpleDtoListResult> CreateDocumentTypeAssociationsAsync(System.Collections.Generic.IEnumerable<AssociationDto> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates Associations.</summary>
        /// <returns>List of results for each created association.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssociationSimpleDtoListResult> CreateDocumentTypeAssociationsAsync(System.Collections.Generic.IEnumerable<AssociationDto> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete a specific Association.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveDocumentTypeAssociationAsync(string userCode, string accountCode, string documentTypeCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a specific Association.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveDocumentTypeAssociationAsync(string userCode, string accountCode, string documentTypeCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Removes Associations in bulk.</summary>
        /// <returns>List of results for each removed association.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssociationSimpleDtoListResult> RemoveDocumentTypeAssociationsAsync(System.Collections.Generic.IEnumerable<AssociationDto> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes Associations in bulk.</summary>
        /// <returns>List of results for each removed association.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssociationSimpleDtoListResult> RemoveDocumentTypeAssociationsAsync(System.Collections.Generic.IEnumerable<AssociationDto> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets associations by filter.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssociationDtoListResult> SearchDocumentTypeAssociationsAsync(SieveModel body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets associations by filter.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssociationDtoListResult> SearchDocumentTypeAssociationsAsync(SieveModel body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Uploads a document. Need to create document metadata using /api/v1/documentmetadata beforehand.</summary>
        /// <param name="documentId">The Key of the document.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadDocumentAsync(string documentId, System.IO.Stream body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Uploads a document. Need to create document metadata using /api/v1/documentmetadata beforehand.</summary>
        /// <param name="documentId">The Key of the document.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadDocumentAsync(string documentId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a document.</summary>
        /// <param name="documentId">The Key of the document.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadDocumentAsync(string documentId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a document.</summary>
        /// <param name="documentId">The Key of the document.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadDocumentAsync(string documentId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Uploads documents. Need to create document metadata using /api/v1/documentmetadata beforehand.</summary>
        /// <param name="documentId">The Key of the document.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BulkUploadAsync(string documentId, Body body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Uploads documents. Need to create document metadata using /api/v1/documentmetadata beforehand.</summary>
        /// <param name="documentId">The Key of the document.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BulkUploadAsync(string documentId, Body body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a document.TODO decide whether:string[] documentIds or Comma separated Keys of the documents or RequestBody.</summary>
        /// <param name="documentIds">document Ids.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BulkDownloadAsync(System.Collections.Generic.IEnumerable<string> documentIds);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a document.TODO decide whether:string[] documentIds or Comma separated Keys of the documents or RequestBody.</summary>
        /// <param name="documentIds">document Ids.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BulkDownloadAsync(System.Collections.Generic.IEnumerable<string> documentIds, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates or update metadata for documents.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeSimpleDtoListResult> CreateOrUpdateDocumentsMetadataAsync(System.Collections.Generic.IEnumerable<DocumentDto> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates or update metadata for documents.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeSimpleDtoListResult> CreateOrUpdateDocumentsMetadataAsync(System.Collections.Generic.IEnumerable<DocumentDto> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a document metadata.</summary>
        /// <param name="documentId">The Key of the document.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentDtoResult> GetDocumentMetadataAsync(string documentId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a document metadata.</summary>
        /// <param name="documentId">The Key of the document.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentDtoResult> GetDocumentMetadataAsync(string documentId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Removes a document metadata.</summary>
        /// <param name="documentId">Removes a document metadata.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveDocumentMetadataAsync(string documentId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes a document metadata.</summary>
        /// <param name="documentId">Removes a document metadata.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveDocumentMetadataAsync(string documentId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all documents metadata.</summary>
        /// <returns>Result object holding</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentDtoListResult> SearchDocumentsMetadataAsync(SieveModel body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all documents metadata.</summary>
        /// <returns>Result object holding</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentDtoListResult> SearchDocumentsMetadataAsync(SieveModel body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates or updates Document Types.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeSimpleDtoListResult> CreateOrUpdateDocumentTypesAsync(System.Collections.Generic.IEnumerable<DocumentTypeToCreateDto> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates or updates Document Types.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeSimpleDtoListResult> CreateOrUpdateDocumentTypesAsync(System.Collections.Generic.IEnumerable<DocumentTypeToCreateDto> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a document type.</summary>
        /// <param name="docTypeCode">The Key of the document Type to look for.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeDtoResult> GetDocumentTypeAsync(string docTypeCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a document type.</summary>
        /// <param name="docTypeCode">The Key of the document Type to look for.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeDtoResult> GetDocumentTypeAsync(string docTypeCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Removes a document type.</summary>
        /// <param name="docTypeCode">Document Type code to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveDocumentTypeAsync(string docTypeCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes a document type.</summary>
        /// <param name="docTypeCode">Document Type code to remove</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveDocumentTypeAsync(string docTypeCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets document types of a category.</summary>
        /// <param name="categoryCode">Category Code to which document types are attached.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeDtoResult> GetDocumentTypeByCategoryAsync(string categoryCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets document types of a category.</summary>
        /// <param name="categoryCode">Category Code to which document types are attached.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeDtoResult> GetDocumentTypeByCategoryAsync(string categoryCode, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAccessTokenAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAccessTokenAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates or updates users.</summary>
        /// <returns>List of results for each created user.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoListResult> CreateOrUpdateUsersAsync(System.Collections.Generic.IEnumerable<UserToCreateDto> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates or updates users.</summary>
        /// <returns>List of results for each created user.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoListResult> CreateOrUpdateUsersAsync(System.Collections.Generic.IEnumerable<UserToCreateDto> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deactivates a user.</summary>
        /// <param name="userCode">The key of the user to deactivate.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoResult> DeactivateUserAsync(string userCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deactivates a user.</summary>
        /// <param name="userCode">The key of the user to deactivate.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoResult> DeactivateUserAsync(string userCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Activates a user</summary>
        /// <param name="userCode">The key of the user to activate.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoResult> ActivateUserAsync(string userCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Activates a user</summary>
        /// <param name="userCode">The key of the user to activate.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoResult> ActivateUserAsync(string userCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Locks a user.</summary>
        /// <param name="userCode">The user to lock</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoResult> LockAsync(string userCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Locks a user.</summary>
        /// <param name="userCode">The user to lock</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoResult> LockAsync(string userCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Unlocks a user</summary>
        /// <param name="userCode">The user to unlock</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoResult> UnlockAsync(string userCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Unlocks a user</summary>
        /// <param name="userCode">The user to unlock</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSimpleDtoResult> UnlockAsync(string userCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Resets the user password</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> ResetpasswordAsync(ResetPasswordDto body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resets the user password</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> ResetpasswordAsync(ResetPasswordDto body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Forgot password.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> ForgotPasswordAsync(ForgotPasswordDto body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Forgot password.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> ForgotPasswordAsync(ForgotPasswordDto body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific user by key.</summary>
        /// <param name="userCode">The user key to filter by.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDtoResult> GetUserAsync(string userCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific user by key.</summary>
        /// <param name="userCode">The user key to filter by.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDtoResult> GetUserAsync(string userCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets accounts for a specific user.</summary>
        /// <param name="userCode">User key to filter by</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountDtoListResult> GetAccountsForSpecificUserAsync(string userCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets accounts for a specific user.</summary>
        /// <param name="userCode">User key to filter by</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountDtoListResult> GetAccountsForSpecificUserAsync(string userCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets documentTypes for a specific user</summary>
        /// <param name="userCode">User key to filter by</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeDtoListResult> GetDocumentTypesForSpecificUserAsync(string userCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets documentTypes for a specific user</summary>
        /// <param name="userCode">User key to filter by</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentTypeDtoListResult> GetDocumentTypesForSpecificUserAsync(string userCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets users by filter.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDtoListResult> SearchUsersAsync(SieveModel body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets users by filter.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDtoListResult> SearchUsersAsync(SieveModel body, System.Threading.CancellationToken cancellationToken);
    
    }

    

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108